[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/DeV/funsets/src/main/scala/funsets/FunSets.scala","languageId":"scala","version":1,"text":"package funsets\n\nimport common._\n\n/**\n * 2. Purely Functional Sets.\n */\nobject FunSets {\n  /**\n   * We represent a set by its characteristic function, i.e.\n   * its `contains` predicate.\n   */\n  type IntSet = Int => Boolean\n\n  /**\n   * Indicates whether a set contains a given element.\n   */\n  def contains(s: IntSet, elem: Int): Boolean = s(elem)\n\n  /**\n   * Returns the set of the one given element.\n   */\n  def singletonSet(elem: Int): IntSet = (x: Int) => x == elem\n\n  /**\n   * Returns the union of the two given sets,\n   * the sets of all elements that are in either `s` or `t`.\n   */\n  def union(s: IntSet, t: IntSet): IntSet = (x:Int) => s(x) || t(x)\n  /**\n   * Returns the intersection of the two given sets,\n   * the set of all elements that are both in `s` and `t`.\n   */\n  def intersect(s: IntSet, t: IntSet): IntSet = (x:Int) => s(x) && t(x)\n  /**\n   * Returns the difference of the two given sets,\n   * the set of all elements of `s` that are not in `t`.\n   */\n  def diff(s: IntSet, t: IntSet): IntSet = (x:Int) => s(x) && !t(x)\n\n  /**\n   * Returns the subset of `s` for which `p` holds.\n   */\n  def filter(s: IntSet, p: Int => Boolean): IntSet = (x:Int) => s(x) && p(x)\n\n  /**\n   * The bounds for `forall` and `exists` are +/- 1000.\n   */\n  val bound = 1000\n\n  /**\n   * Returns whether all bounded integers within `s` satisfy `p`.\n   */\n  def forall(s: IntSet, p: Int => Boolean): Boolean = {\n    \n    def forall_aux(a: Int): Boolean = {\n      if (a > bound) true\n      else if (contains(s,a) && !p(a)) false\n      else forall_aux(a+1)\n    }\n    \n    forall_aux(-bound)\n  }\n\n  /**\n   * Returns whether there exists a bounded integer within `s`\n   * that satisfies `p`.\n   */\n  def exists(s: IntSet, p: Int => Boolean): Boolean = {\n    def exists_aux(a: Int): Boolean = {\n    if (a > bound) false\n    else if (contains(s, a) && p(a)) true\n    else exists_aux(a + 1)\n  }\n\n  exists_aux(-bound)\n  }\n\n  /**\n   * Returns a set transformed by applying `f` to each element of `s`.\n   */\n  def map(s: IntSet, f: Int => Int): IntSet = (x: Int) => s(f(x))\n\n  /**\n   * Displays the contents of a set\n   */\n  def toString(s: IntSet): String = {\n    val xs = for (i <- -bound to bound if contains(s, i)) yield i\n    xs.mkString(\"{\", \",\", \"}\")\n  }\n\n  /**\n   * Prints the contents of a set on the console.\n   */\n  def printSet(s: IntSet) = {\n    println(toString(s))\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\DeV\funsets\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 10-Mar-2023, 11:46:59 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
