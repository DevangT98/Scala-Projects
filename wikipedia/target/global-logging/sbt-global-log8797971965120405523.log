[0m[[0m[0mdebug[0m] [0m[0m> Exec(;Test/compile; collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(Test/compile, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / compile[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"52","parents":[]},"eventTime":1681773147271,"message":"Compiling wikipedia","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Compile"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"52","parents":[]},"eventTime":1681773147307,"message":"Compiled wikipedia","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Compile"},"errors":0,"warnings":0,"time":36}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"53","parents":[]},"eventTime":1681773147643,"message":"Compiling wikipedia-test","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"}}})[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\DeV\ScalaProjects\wikipedia\target\scala-2.13\test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"compiling 1 Scala source to C:\\DeV\\ScalaProjects\\wikipedia\\target\\scala-2.13\\test-classes ..."})[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol Ordering[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition potentials: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":3,"character":29},"end":{"line":3,"character":30}},"severity":1,"source":"sbt","message":"not found: value munit"}],"reset":false})[0m
[0m[[0m[31merror[0m] [0m[0mC:\DeV\ScalaProjects\wikipedia\src\test\scala\WikipediaSuite.scala:4:30: not found: value munit[0m
[0m[[0m[31merror[0m] [0m[0mclass WikipediaSuite extends munit.FunSuite {[0m
[0m[[0m[31merror[0m] [0m[0m                             ^[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"C:\\DeV\\ScalaProjects\\wikipedia\\src\\test\\scala\\WikipediaSuite.scala:4:30: not found: value munit"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"class WikipediaSuite extends munit.FunSuite {"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"                             ^"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":89,"character":2},"end":{"line":89,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"}],"reset":false})[0m
[0m[[0m[31merror[0m] [0m[0mC:\DeV\ScalaProjects\wikipedia\src\test\scala\WikipediaSuite.scala:90:3: not found: value test[0m
[0m[[0m[31merror[0m] [0m[0m  test("'occurrencesOfLang' should work for (specific) RDD with one element") {[0m
[0m[[0m[31merror[0m] [0m[0m  ^[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"C:\\DeV\\ScalaProjects\\wikipedia\\src\\test\\scala\\WikipediaSuite.scala:90:3: not found: value test"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  test(\"'occurrencesOfLang' should work for (specific) RDD with one element\") {"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  ^"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":97,"character":2},"end":{"line":97,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"}],"reset":false})[0m
[0m[[0m[31merror[0m] [0m[0mC:\DeV\ScalaProjects\wikipedia\src\test\scala\WikipediaSuite.scala:98:3: not found: value test[0m
[0m[[0m[31merror[0m] [0m[0m  test("'rankLangs' should work for RDD with two elements") {[0m
[0m[[0m[31merror[0m] [0m[0m  ^[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"C:\\DeV\\ScalaProjects\\wikipedia\\src\\test\\scala\\WikipediaSuite.scala:98:3: not found: value test"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  test(\"'rankLangs' should work for RDD with two elements\") {"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  ^"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":107,"character":2},"end":{"line":107,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"}],"reset":false})[0m
[0m[[0m[31merror[0m] [0m[0mC:\DeV\ScalaProjects\wikipedia\src\test\scala\WikipediaSuite.scala:108:3: not found: value test[0m
[0m[[0m[31merror[0m] [0m[0m  test("'makeIndex' creates a simple index with two entries") {[0m
[0m[[0m[31merror[0m] [0m[0m  ^[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"C:\\DeV\\ScalaProjects\\wikipedia\\src\\test\\scala\\WikipediaSuite.scala:108:3: not found: value test"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  test(\"'makeIndex' creates a simple index with two entries\") {"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  ^"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":122,"character":2},"end":{"line":122,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"}],"reset":false})[0m
[0m[[0m[31merror[0m] [0m[0mC:\DeV\ScalaProjects\wikipedia\src\test\scala\WikipediaSuite.scala:123:3: not found: value test[0m
[0m[[0m[31merror[0m] [0m[0m  test("'rankLangsUsingIndex' should work for a simple RDD with three elements") {[0m
[0m[[0m[31merror[0m] [0m[0m  ^[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"C:\\DeV\\ScalaProjects\\wikipedia\\src\\test\\scala\\WikipediaSuite.scala:123:3: not found: value test"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  test(\"'rankLangsUsingIndex' should work for a simple RDD with three elements\") {"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  ^"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":138,"character":2},"end":{"line":138,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"}],"reset":false})[0m
[0m[[0m[31merror[0m] [0m[0mC:\DeV\ScalaProjects\wikipedia\src\test\scala\WikipediaSuite.scala:139:3: not found: value test[0m
[0m[[0m[31merror[0m] [0m[0m  test("'rankLangsReduceByKey' should work for a simple RDD with four elements") {[0m
[0m[[0m[31merror[0m] [0m[0m  ^[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"C:\\DeV\\ScalaProjects\\wikipedia\\src\\test\\scala\\WikipediaSuite.scala:139:3: not found: value test"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  test(\"'rankLangsReduceByKey' should work for a simple RDD with four elements\") {"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"  ^"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskProgress, {"taskId":{"id":"53","parents":[]},"eventTime":1681773148279,"message":"Compiling wikipedia-test (15%)","total":26,"progress":15,"dataKind":"compile-progress","data":{"target":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskProgress, {"taskId":{"id":"53","parents":[]},"eventTime":1681773148283,"message":"Compiling wikipedia-test (15%)","total":26,"progress":15,"dataKind":"compile-progress","data":{"target":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"}}})[0m
[0m[[0m[31merror[0m] [0m[0m6 errors found[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"6 errors found"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"},"buildTarget":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"diagnostics":[{"range":{"start":{"line":3,"character":29},"end":{"line":3,"character":30}},"severity":1,"source":"sbt","message":"not found: value munit"},{"range":{"start":{"line":89,"character":2},"end":{"line":89,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"},{"range":{"start":{"line":97,"character":2},"end":{"line":97,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"},{"range":{"start":{"line":107,"character":2},"end":{"line":107,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"},{"range":{"start":{"line":122,"character":2},"end":{"line":122,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"},{"range":{"start":{"line":138,"character":2},"end":{"line":138,"character":6}},"severity":1,"source":"sbt","message":"not found: value test"}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"53","parents":[]},"eventTime":1681773148287,"message":"Compiled wikipedia-test","status":2,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/DeV/ScalaProjects/wikipedia/#wikipedia/Test"},"errors":6,"warnings":0,"time":644}})[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched json error for requestId None: {"code":-32603,"message":"(Test / \u001b[31mcompileIncremental\u001b[0m) Compilation failed"}[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mcompileIncremental[0m) Compilation failed[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"(Test / \u001b[31mcompileIncremental\u001b[0m) Compilation failed"})[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 1 s, completed 17-Apr-2023, 7:12:28 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala","languageId":"scala","version":1,"text":"package wikipedia\n\n\nclass WikipediaSuite extends munit.FunSuite {\n\n/* For more information on writing tests, see\n   https://scalameta.org/munit/docs/getting-started.html\n   but here's a simple example:\n\n   test(\"An example test that succeeds\") {\n     val obtained = 42\n     val expected = 42\n     assertEquals(obtained, expected)\n   }\n*/\n\n  def initializeWikipediaRanking(): Boolean =\n    try {\n      WikipediaRanking\n      true\n    } catch {\n      case ex: Throwable =>\n        println(ex.getMessage)\n        ex.printStackTrace()\n        false\n    }\n\n  override def afterAll(): Unit = {\n    assert(initializeWikipediaRanking(), \" -- did you fill in all the values in WikipediaRanking (conf, sc, wikiRdd)?\")\n    import WikipediaRanking._\n    sc.stop()\n  }\n\n  /**\n    * Creates a truncated string representation of a list, adding \", ...)\" if there\n    * are too many elements to show\n    * @param l The list to preview\n    * @param n The number of elements to cut it at\n    * @return A preview of the list, containing at most n elements.\n    */\n  def previewList[A](l: List[A], n: Int = 10): String =\n    if (l.length <= n) l.toString\n    else l.take(n).toString.dropRight(1) + \", ...)\"\n\n  /**\n    * Asserts that all the elements in a assumed list and an expected list are the same,\n    * regardless of order. For a prettier output, assumed and expected should be sorted\n    * with the same ordering.\n    * @param assumed The actual list\n    * @param expected The expected list\n    * @tparam A Type of the list elements\n    */\n  def assertSameElements[A](assumed: List[A], expected: List[A]): Unit = {\n    val assumedSet = assumed.toSet\n    val expectedSet = expected.toSet\n\n    val unexpected = assumedSet -- expectedSet\n    val missing = expectedSet -- assumedSet\n\n    val noUnexpectedElements = unexpected.isEmpty\n    val noMissingElements = missing.isEmpty\n\n    val noMatchString =\n      s\"\"\"\n         |Expected: ${previewList(expected)}\n         |Actual:   ${previewList(assumed)}\"\"\".stripMargin\n\n    assert(noUnexpectedElements,\n      s\"\"\"|$noMatchString\n          |The assumed collection contains some unexpected elements: ${previewList(unexpected.toList, 5)}\"\"\".stripMargin)\n\n    assert(noMissingElements,\n      s\"\"\"|$noMatchString\n          |The assumed collection is missing some expected elements: ${previewList(missing.toList, 5)}\"\"\".stripMargin)\n  }\n\n  // Conditions:\n  // (1) the language stats contain the same elements\n  // (2) they are ordered (and the order doesn't matter if there are several languages with the same count)\n  def assertEquivalentAndOrdered(assumed: List[(String, Int)], expected: List[(String, Int)]): Unit = {\n    // (1)\n    assertSameElements(assumed, expected)\n    // (2)\n    assert(\n      !(assumed zip assumed.tail).exists({ case ((_, occ1), (_, occ2)) => occ1 < occ2 }),\n      \"The assumed elements are not in descending order\"\n    )\n  }\n\n  test(\"'occurrencesOfLang' should work for (specific) RDD with one element\") {\n    assert(initializeWikipediaRanking(), \" -- did you fill in all the values in WikipediaRanking (conf, sc, wikiRdd)?\")\n    import WikipediaRanking._\n    val rdd = sc.parallelize(Seq(WikipediaArticle(\"title\", \"Java Jakarta\")))\n    val res = (occurrencesOfLang(\"Java\", rdd) == 1)\n    assert(res, \"occurrencesOfLang assumed (specific) RDD with one element should equal to 1\")\n  }\n\n  test(\"'rankLangs' should work for RDD with two elements\") {\n    assert(initializeWikipediaRanking(), \" -- did you fill in all the values in WikipediaRanking (conf, sc, wikiRdd)?\")\n    import WikipediaRanking._\n    val langs = List(\"Scala\", \"Java\")\n    val rdd = sc.parallelize(List(WikipediaArticle(\"1\", \"Scala is great\"), WikipediaArticle(\"2\", \"Java is OK, but Scala is cooler\")))\n    val ranked = rankLangs(langs, rdd)\n    val res = ranked.head._1 == \"Scala\"\n    assert(res)\n  }\n\n  test(\"'makeIndex' creates a simple index with two entries\") {\n    assert(initializeWikipediaRanking(), \" -- did you fill in all the values in WikipediaRanking (conf, sc, wikiRdd)?\")\n    import WikipediaRanking._\n    val langs = List(\"Scala\", \"Java\")\n    val articles = List(\n        WikipediaArticle(\"1\",\"Groovy is pretty interesting, and so is Erlang\"),\n        WikipediaArticle(\"2\",\"Scala and Java run on the JVM\"),\n        WikipediaArticle(\"3\",\"Scala is not purely functional\")\n      )\n    val rdd = sc.parallelize(articles)\n    val index = makeIndex(langs, rdd)\n    val res = index.count() == 2\n    assert(res)\n  }\n\n  test(\"'rankLangsUsingIndex' should work for a simple RDD with three elements\") {\n    assert(initializeWikipediaRanking(), \" -- did you fill in all the values in WikipediaRanking (conf, sc, wikiRdd)?\")\n    import WikipediaRanking._\n    val langs = List(\"Scala\", \"Java\")\n    val articles = List(\n        WikipediaArticle(\"1\",\"Groovy is pretty interesting, and so is Erlang\"),\n        WikipediaArticle(\"2\",\"Scala and Java run on the JVM\"),\n        WikipediaArticle(\"3\",\"Scala is not purely functional\")\n      )\n    val rdd = sc.parallelize(articles)\n    val index = makeIndex(langs, rdd)\n    val ranked = rankLangsUsingIndex(index)\n    val res = (ranked.head._1 == \"Scala\")\n    assert(res)\n  }\n\n  test(\"'rankLangsReduceByKey' should work for a simple RDD with four elements\") {\n    assert(initializeWikipediaRanking(), \" -- did you fill in all the values in WikipediaRanking (conf, sc, wikiRdd)?\")\n    import WikipediaRanking._\n    val langs = List(\"Scala\", \"Java\", \"Groovy\", \"Haskell\", \"Erlang\")\n    val articles = List(\n        WikipediaArticle(\"1\",\"Groovy is pretty interesting, and so is Erlang\"),\n        WikipediaArticle(\"2\",\"Scala and Java run on the JVM\"),\n        WikipediaArticle(\"3\",\"Scala is not purely functional\"),\n        WikipediaArticle(\"4\",\"The cool kids like Haskell more than Java\"),\n        WikipediaArticle(\"5\",\"Java is for enterprise developers\")\n      )\n    val rdd = sc.parallelize(articles)\n    val ranked = rankLangsReduceByKey(langs, rdd)\n    val res = (ranked.head._1 == \"Java\")\n    assert(res)\n  }\n\n\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/DeV/ScalaProjects/wikipedia/src/test/scala/WikipediaSuite.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
